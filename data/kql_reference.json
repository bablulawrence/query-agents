[
    {
        "Command": "where",
        "Description": "Filters on a specific predicate.",
        "Syntax": "T | where Predicate"
    },
    {
        "Command": "where contains/has",
        "Description": "Contains: Looks for any substring match. Has: Looks for a specific word (better performance).",
        "Syntax": "T | where col1 contains/has \"[search term]\""
    },
    {
        "Command": "search",
        "Description": "Searches all columns in the table for the value.",
        "Syntax": "[TabularSource |] search [kind=CaseSensitivity] [in(TableSources)] SearchPredicate"
    },
    {
        "Command": "take",
        "Description": "Returns the specified number of records. Use to test a query. Note: take and limit are synonyms.",
        "Syntax": "T | take NumberOfRows"
    },
    {
        "Command": "case",
        "Description": "Adds a condition statement, similar to if/then/elseif in other systems.",
        "Syntax": "case(predicate_1, then_1, predicate_2, then_2, predicate_3, then_3, else)"
    },
    {
        "Command": "distinct",
        "Description": "Produces a table with the distinct combination of the provided columns of the input table.",
        "Syntax": "distinct [ColumnName], [ColumnName]"
    },
    {
        "Command": "ago",
        "Description": "Returns the time offset relative to the time the query executes. For example, ago(1h) is one hour before the current clock's reading.",
        "Syntax": "ago(a_timespan)"
    },
    {
        "Command": "format_datetime",
        "Description": "Returns data in various date formats.",
        "Syntax": "format_datetime(datetime , format)"
    },
    {
        "Command": "bin",
        "Description": "Rounds all values in a timeframe and groups them.",
        "Syntax": "bin(value,roundTo)"
    },
    {
        "Command": "print",
        "Description": "Outputs a single row with one or more scalar expressions.",
        "Syntax": "print [ColumnName =] ScalarExpression [',' ...]"
    },
    {
        "Command": "project",
        "Description": "Selects the columns to include in the order specified.",
        "Syntax": "T | project ColumnName [= Expression] [, ...]"
    },
    {
        "Command": "project-away",
        "Description": "Selects the columns to exclude from the output.",
        "Syntax": "T | project-away ColumnNameOrPattern [, ...]"
    },
    {
        "Command": "project-keep",
        "Description": "Selects the columns to keep in the output.",
        "Syntax": "T | project-keep ColumnNameOrPattern [, ...]"
    },
    {
        "Command": "project-rename",
        "Description": "Renames columns in the result output.",
        "Syntax": "T | project-rename new_column_name = column_name"
    },
    {
        "Command": "project-reorder",
        "Description": "Reorders columns in the result output.",
        "Syntax": "T | project-reorder Col2, Col1, Col* asc"
    },
    {
        "Command": "extend",
        "Description": "Creates a calculated column and adds it to the result set.",
        "Syntax": "T | extend [ColumnName | (ColumnName[, ...]) =]Expression [, ...]"
    },
    {
        "Command": "sort operator",
        "Description": "Sort the rows of the input table by one or more columns in ascending or descending order.",
        "Syntax": "T | sort by expression1 [asc|desc], expression2[asc|desc], …"
    },
    {
        "Command": "top",
        "Description": "Returns the first N rows of the dataset when the dataset is sorted using by.",
        "Syntax": "T | top numberOfRows by expression [asc|desc] [nullsfirst|last]"
    },
    {
        "Command": "summarize",
        "Description": "Groups the rows according to the by group columns, and calculates aggregations over each group.",
        "Syntax": "T | summarize [[Column =] Aggregation [, ...]] [by[Column =] GroupExpression [, ...]]"
    },
    {
        "Command": "count",
        "Description": "Counts records in the input table (for example, T). This operator is shorthand for summarize count().",
        "Syntax": "T | count"
    },
    {
        "Command": "join",
        "Description": "Merges the rows of two tables to form a new table by matching values of the specified column(s) from each table. Supports a full range of join types.",
        "Syntax": "LeftTable | join [JoinParameters] ( RightTable ) onAttributes"
    },
    {
        "Command": "union",
        "Description": "Takes two or more tables and returns all their rows.",
        "Syntax": "[T1] | union [T2], [T3], …"
    },
    {
        "Command": "range",
        "Description": "Generates a table with an arithmetic series of values.",
        "Syntax": "range columnName from start to stop step step"
    },
    {
        "Command": "lookup",
        "Description": "Extends the columns of a fact table with values looked-up in a dimension table.",
        "Syntax": "T1 | lookup [kind = (leftouter|inner)] ( T2 ) onAttributes"
    },
    {
        "Command": "mv-expand",
        "Description": "Turns dynamic arrays into rows (multi-value expansion).",
        "Syntax": "T | mv-expand Column"
    },
    {
        "Command": "parse",
        "Description": "Evaluates a string expression and parses its value into one or more calculated columns. Use for structuring unstructured data.",
        "Syntax": "T | parse [kind=regex [flags=regex_flags]|simple|relaxed] Expression with * (StringConstantColumnName [: ColumnType]) *..."
    },
    {
        "Command": "make-series",
        "Description": "Creates series of specified aggregated values along a specified axis.",
        "Syntax": "T | make-series [MakeSeriesParamters] [Column =]Aggregation [default = DefaultValue] [, ...] onAxisColumn from start to end step step [by [Column =]GroupExpression [, ...]]"
    },
    {
        "Command": "let",
        "Description": "Binds a name to expressions that can refer to its bound value. Values can be lambda expressions to create query-defined functions as part of the query.",
        "Syntax": "let Name = ScalarExpression | TabularExpression |FunctionDefinitionExpression"
    },
    {
        "Command": "invoke",
        "Description": "Runs the function on the table that it receives as input.",
        "Syntax": "T | invoke function([param1, param2])"
    },
    {
        "Command": "evaluate pluginName",
        "Description": "Evaluates query language extensions (plugins).",
        "Syntax": "[T |] evaluate [ evaluateParameters ] PluginName ([PluginArg1 [, PluginArg2]... )"
    },
    {
        "Command": "render",
        "Description": "Renders results as a graphical output.",
        "Syntax": "T | render Visualization [with (PropertyName = PropertyValue [, ...] )]"
    }
]
